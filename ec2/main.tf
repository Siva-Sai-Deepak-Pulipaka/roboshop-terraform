# here there is data block. to make more organised we are storing data block in data.tf

resource "aws_spot_instance_request" "ec2" {  
  ami                     = data.aws_ami.ami.image_id
  instance_type           = var.instance_type
  vpc_security_group_ids  = [aws_security_group.sg.id]
  iam_instance_profile    = "${var.env}-${var.component}-role"
  tags = {
    Name = var.component
  }
    
}

// aws_ec2_tag is needed to inherit the tags generated by spot request
resource "aws_ec2_tag" "ec2" {
  resource_id = aws_spot_instance_request.ec2.spot_instance_id
  for_each = aws_spot_instance_request.ec2.tags
  key = each.key
  value = each.value
}

resource "null_resource" "provisioner" {
  //depends_on = [aws_spot_instance_request.ec2] //we have included this line because remote-exec will take some time. so we have included depends_on parameter. This will ensure you after the instance is fully created which we mentioned in depends on parameter, then only remote-exec will request to connect.  
    provisioner "remote-exec" {
    connection {
          host     = aws_spot_instance_request.ec2.public_ip
          user     = "centos"
          password = "DevOps321"
    }
      inline = [
        "ansible-pull -i localhost, -U https://github.com/Siva-Sai-Deepak-Pulipaka/roboshop-ansible.git roboshop.yml -e role_name=${var.component} -e env=${var.env}"
        
      ]

  }

}


resource "aws_security_group" "sg" {
  name        = "${var.component}-${var.env}-sg"
  description = "Allow TLS inbound traffic"
  
  ingress {
    description      = "Allowing all for incoming"
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.component}-${var.env}-sg"
  }
}

resource "aws_route53_record" "record" {
  zone_id = "Z017354339FNHXHAHU536"
  name    = "${var.component}-dev.easydevops.online"
  type    = "A"
  ttl     = 30
  records = [aws_spot_instance_request.ec2.private_ip]
}

# creating iam policy for instances we create
resource "aws_iam_policy" "policy" {
  name        = "${var.env}-${var.component}-ssm"
  path        = "/"
  description = "${var.env}-${var.component}-ssm"

  policy = jsonencode({
    Version = "2012-10-17"
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "ssm:GetParameters",
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws:ssm:us-east-1:569313928762:parameter/${var.env}.${var.component}"      
            #this json file copied from IAM policy we created. and the above line we make changes to adapt with any component and environment.
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": "ssm:DescribeParameters",
            "Resource": "*"
        }
    ]
  })
}


# this is to create a role and replaced with trusted relationships for a role in aws. it means simply attaching our role to a policy
resource "aws_iam_role" "role" {
  name = "${var.env}-${var.component}-role"
  assume_role_policy = jsonencode({
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
})
}

# we are creating an instance profile because we cant attach role directly. only instance profile will attach role to our ec2.
resource "aws_iam_instance_profile" "profile" {
  name = "${var.env}-${var.component}-role"
  role = aws_iam_role.role.name
}

resource "aws_iam_role_policy_attachment" "policy-attach" {
  role       = aws_iam_role.role.name
  policy_arn = aws_iam_policy.ssm-policy.arn
}